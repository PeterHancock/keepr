// Generated by CoffeeScript 1.3.3
(function() {
  var DropBoxFileSystem, InMemoryFileSystem, Iterable, JsonDrop, Mixin, Node, NodeData, NodeManager, exports, forEachAsync, mapAsync, reduceAsync,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  if ((typeof global !== "undefined" && global !== null) && (typeof require !== "undefined" && require !== null) && (typeof module !== "undefined" && module !== null)) {
    exports = global;
    exports.async = require('async');
  }

  reduceAsync = async.reduce;

  forEachAsync = async.forEach;

  mapAsync = async.map;

  Mixin = (function() {

    function Mixin() {}

    Mixin.mixin = function(source) {
      return _.extend(this.prototype, source);
    };

    return Mixin;

  })();

  Iterable = {
    each: function(iterator, callback) {
      throw 'no each';
    },
    forEach: function(iterator, callback) {
      return this.each(iterator, callback);
    },
    map: function(mapTo, callback) {
      var collectElements, result;
      if (!callback) {
        callback = mapTo;
        mapTo = function(element) {
          return element;
        };
      }
      result = [];
      collectElements = function(element, node, index) {
        return result.push(mapTo(element, node));
      };
      return this.each(collectElements, function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null, result);
      });
    }
  };

  if ((typeof global !== "undefined" && global !== null) && (typeof require !== "undefined" && require !== null) && (typeof module !== "undefined" && module !== null)) {
    exports = global;
    exports._ = require('underscore');
  }

  JsonDrop = (function() {

    function JsonDrop(_arg) {
      var fsys, key;
      fsys = _arg.fsys, key = _arg.key;
      if (!(fsys || key)) {
        throw new Error('Require a fsys or a dropbox key');
      }
      if (key) {
        this.fsys = new DropBoxFileSystem({
          key: key
        });
      } else {
        this.fsys = fsys;
      }
      this.nodeManager = new NodeManager({
        fsys: this.fsys
      });
    }

    JsonDrop.prototype.get = function(path) {
      return Node.create(path, this.nodeManager);
    };

    return JsonDrop;

  })();

  Node = (function(_super) {

    __extends(Node, _super);

    Node.mixin(Iterable);

    Node.normalizePath = function(path) {
      if (path === '') {
        return path;
      }
      return path.replace(/^\/+/, '').replace(/\/+$/, '');
    };

    Node.create = function(path, nodeManager) {
      path = path ? Node.normalizePath(path) : '';
      return new Node({
        path: path,
        nodeManager: nodeManager
      });
    };

    function Node(_arg) {
      this.path = _arg.path, this.nodeManager = _arg.nodeManager;
    }

    Node.prototype.child = function(path) {
      if (!path) {
        throw new Exception('No child path');
      }
      path = Node.normalizePath(path);
      path = this.path ? this.path + '/' + path : path;
      return Node.create(path, this.nodeManager);
    };

    Node.prototype.getVal = function(callback) {
      return this.nodeManager.getVal(this, callback);
    };

    Node.prototype.setVal = function(obj, callback) {
      this.nodeManager.setVal(this, obj, callback);
      return this;
    };

    Node.prototype.remove = function(callback) {
      this.nodeManager.remove(this, callback);
      return this;
    };

    Node.prototype.pushVal = function(obj, callback) {
      return this.nodeManager.pushVal(this, obj, callback);
    };

    Node.prototype.each = function(iterator, callback) {
      var _this = this;
      return this.getVal(function(err, val) {
        if (err) {
          return callback(err);
        }
        _.each(_.pairs(val), function(_arg, index, list) {
          var key, value;
          key = _arg[0], value = _arg[1];
          return iterator(value, _this.child(key), index);
        });
        return callback(null);
      });
    };

    return Node;

  })(Mixin);

  DropBoxFileSystem = (function() {
    var authorizeDropbox;

    authorizeDropbox = function(dropbox) {
      dropbox.authDriver(new Dropbox.Drivers.Redirect({
        rememberUser: true
      }));
      return dropbox.authenticate(function(error, data) {
        if (error) {
          throw new Error(error);
        }
      });
    };

    function DropBoxFileSystem(_arg) {
      var dropbox, key;
      dropbox = _arg.dropbox, key = _arg.key;
      if (!(dropbox || key)) {
        throw new Error('Require a dropbox client instance or a dropbox key');
      }
      if (key) {
        this.dropbox = new Dropbox.Client({
          key: key,
          sandbox: true
        });
      } else {
        this.dropbox = dropbox;
      }
      authorizeDropbox(this.dropbox);
    }

    DropBoxFileSystem.prototype.remove = function(path, callback) {
      return this.dropbox.remove(path, callback);
    };

    DropBoxFileSystem.prototype.readdir = function(path, callback) {
      return this.dropbox.readdir(path, callback);
    };

    DropBoxFileSystem.prototype.readFile = function(path, callback) {
      return this.dropbox.readFile(path, callback);
    };

    DropBoxFileSystem.prototype.writeFile = function(path, text, callback) {
      return this.dropbox.writeFile(path, text, callback);
    };

    return DropBoxFileSystem;

  })();

  InMemoryFileSystem = (function() {

    function InMemoryFileSystem() {
      this.dirs = {};
    }

    InMemoryFileSystem.prototype.remove = function(path, callback) {
      return callback();
    };

    InMemoryFileSystem.prototype.readdir = function(path, callback) {
      var dir, paths, root, _ref;
      _ref = path.split('/'), root = _ref[0], paths = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      dir = this._getDir(paths);
      dir = dir ? _.keys(dir) : [];
      return callback(null, dir);
    };

    InMemoryFileSystem.prototype.readFile = function(path, callback) {
      var dir, file, paths, root, text, _i, _ref;
      _ref = path.split('/'), root = _ref[0], paths = 3 <= _ref.length ? __slice.call(_ref, 1, _i = _ref.length - 1) : (_i = 1, []), file = _ref[_i++];
      dir = this._getDir(paths);
      text = dir ? dir[file] : null;
      return callback(null, text);
    };

    InMemoryFileSystem.prototype.writeFile = function(path, text, callback) {
      var file, paths, root, _i, _ref;
      _ref = path.split('/'), root = _ref[0], paths = 3 <= _ref.length ? __slice.call(_ref, 1, _i = _ref.length - 1) : (_i = 1, []), file = _ref[_i++];
      this._mkdir(paths)[file] = text;
      return callback();
    };

    InMemoryFileSystem.prototype._getDir = function(paths) {
      return _.reduce(paths, function(memo, path) {
        var next;
        next = memo ? memo[path] : null;
        if (next) {
          return next;
        } else {
          return null;
        }
      }, this.dirs);
    };

    InMemoryFileSystem.prototype._mkdir = function(paths) {
      return _.reduce(paths, function(memo, part) {
        var next;
        next = memo[part];
        if (!next) {
          next = {};
          memo[part] = next;
        }
        return next;
      }, this.dirs);
    };

    return InMemoryFileSystem;

  })();

  JsonDrop.InMemory = InMemoryFileSystem;

  JsonDrop.inMemory = function() {
    return new JsonDrop({
      fsys: new InMemoryFileSystem()
    });
  };

  if ((typeof global !== "undefined" && global !== null) && (typeof require !== "undefined" && require !== null) && (typeof module !== "undefined" && module !== null)) {
    exports = global;
    exports._ = require('underscore');
  }

  NodeManager = (function() {

    NodeManager.SCALAR_FILE = 'val.json';

    NodeManager.ARRAY_FILE = 'array.json';

    NodeManager.JSONDROP_DIR = '/jsondrop';

    function NodeManager(_arg) {
      this.fsys = _arg.fsys;
      this.rootNodeData = new NodeData('/');
    }

    NodeManager.pathFor = function(node, file) {
      var filePart, pathPart;
      filePart = file ? '/' + file : '';
      pathPart = node.path ? '/' + node.path : '';
      return this.JSONDROP_DIR + pathPart + filePart;
    };

    NodeManager.pathForScalar = function(node) {
      return NodeManager.pathFor(node, NodeManager.SCALAR_FILE);
    };

    NodeManager.pathForArray = function(node) {
      return NodeManager.pathFor(node, NodeManager.ARRAY_FILE);
    };

    NodeManager.prototype.getVal = function(node, callback) {
      var nodeData,
        _this = this;
      nodeData = this._getNodeData(node);
      if (!nodeData) {
        return callback(null, void 0);
      }
      if (nodeData.loaded) {
        return callback(null, nodeData.value);
      } else {
        return this._readVal(node, function(err, val) {
          if (err) {
            return callback(err, null);
          }
          if (val) {
            nodeData.setVal(val);
          }
          return callback(err, val);
        });
      }
    };

    NodeManager.prototype.setVal = function(node, val, callback) {
      var _this = this;
      return this._clear(node, function() {
        return _this._writeVal(node, val, function(err) {
          if (err) {
            return callback(err);
          }
          _this._setNodeData(node, val);
          return callback(err);
        });
      });
    };

    NodeManager.prototype.remove = function(node, callback) {
      return this._clear(node, callback);
    };

    NodeManager.prototype.pushVal = function(node, obj, callback) {
      var child;
      child = node.child(NodeManager.createIndex());
      return child.setVal(obj, function(err) {
        return callback(err, child);
      });
    };

    NodeManager.prototype._getNodeData = function(node) {
      return this._getNodeDataWithDefault(node, function(path, parent) {
        return null;
      });
    };

    NodeManager.prototype._setNodeData = function(node, val) {
      return this._getNodeDataWithDefault(node).setVal(val);
    };

    NodeManager.prototype._getNodeDataWithDefault = function(node, nodeCreator) {
      if (nodeCreator == null) {
        nodeCreator = function(path, parent) {
          return new NodeData(path, parent);
        };
      }
      if (!node.path) {
        return this.rootNodeData;
      }
      return _.reduce(node.path.split('/'), function(parent, path) {
        var child;
        child = parent.child(path);
        if (child) {
          return child;
        } else {
          return nodeCreator(path, parent);
        }
      }, this.rootNodeData);
    };

    NodeManager.prototype._readVal = function(node, callback) {
      var _this = this;
      return this.fsys.readdir(NodeManager.pathFor(node), function(error, entries) {
        if (error) {
          return callback(error, null);
        }
        if (_(entries).contains(NodeManager.SCALAR_FILE)) {
          return _this._readScalar(node, callback);
        }
        return _this._readObject(node, entries, callback);
      });
    };

    NodeManager.prototype._clear = function(node, callback) {
      return this.fsys.remove(NodeManager.pathFor(node), function(error, stat) {
        return callback();
      });
    };

    NodeManager.prototype._readScalar = function(node, callback) {
      return this.fsys.readFile(NodeManager.pathForScalar(node), function(err, val) {
        val = err ? null : JSON.parse(val).val;
        return callback(err, val);
      });
    };

    NodeManager.prototype._readObject = function(node, entries, callback) {
      var _this = this;
      return reduceAsync(entries, null, function(memo, file, callback) {
        return _this.getVal(node.child(file), function(err, val) {
          memo = memo ? memo : {};
          memo[file] = val;
          return callback(err, memo);
        });
      }, callback);
    };

    NodeManager.prototype._writeVal = function(node, val, callback) {
      if (_.isNaN(val) || _.isNull(val) || _.isUndefined(val) || _.isFunction(val)) {
        return callback(null);
      }
      if (_.isString(val) || _.isNumber(val) || _.isBoolean(val) || _.isDate(val) || _.isRegExp(val)) {
        return this._writeScalar(node, val, callback);
      }
      if (_.isArray(val)) {
        return this._writeArray(node, val, callback);
      }
      if (_.isObject(val)) {
        return this._writeObject(node, val, callback);
      }
    };

    NodeManager.prototype._writeScalar = function(node, scalar, callback) {
      var serializedVal;
      serializedVal = JSON.stringify({
        val: scalar
      });
      return this.fsys.writeFile(NodeManager.pathForScalar(node), serializedVal, callback);
    };

    NodeManager.prototype._writeObject = function(node, obj, callback) {
      var _this = this;
      return forEachAsync(_(obj).pairs(), function(_arg, callback) {
        var key, value;
        key = _arg[0], value = _arg[1];
        return _this._writeVal(node.child(key), value, callback);
      }, callback);
    };

    NodeManager.prototype._writeArray = function(node, array, callback) {
      var _this = this;
      return reduceAsync(array, 0, function(i, item, callback) {
        return _this._writeVal(node.child('_' + i), item, function(error) {
          return callback(error, i + 1);
        });
      }, function(error, index) {
        return callback(error);
      });
    };

    NodeManager.createIndex = function() {
      return "-" + (new Date().getTime().toString(36));
    };

    return NodeManager;

  })();

  NodeData = (function() {

    function NodeData(path, parent, val) {
      this.path = path;
      this.parent = parent ? parent : null;
      if (this.parent) {
        this.parent.children[this.path] = this;
      }
      this.loaded = false;
      this.value = void 0;
      if (val) {
        this.loaded = true;
        this.value = val;
      }
      this.children = {};
    }

    NodeData.prototype.setVal = function(val) {
      this.loaded = true;
      this.children = {};
      this.value = val;
      return this._updateParentVal(val);
    };

    NodeData.prototype._updateParentVal = function(val) {
      var parentVal;
      if (this.parent) {
        if (_.isObject(this.parent.value)) {
          return this.parent.value[this.path] = val;
        } else {
          parentVal = {};
          parentVal[this.path] = val;
          this.parent.value = parentVal;
          return this.parent._updateParentVal(parentVal);
        }
      }
    };

    NodeData.prototype.child = function(path) {
      var child, val;
      child = this.children[path];
      if (child) {
        return child;
      }
      if (this.loaded) {
        val = this.value[path];
        if (val) {
          child = new NodeData(path, this, val);
        } else {
          child = null;
        }
      } else {
        child = new NodeData(path, this.parent);
      }
      return child;
    };

    return NodeData;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = JsonDrop;
  } else if (typeof window !== "undefined" && window !== null) {
    window.JsonDrop = JsonDrop;
  } else {
    throw new Error('This library only supports node.js and modern browsers.');
  }

}).call(this);
