// Generated by CoffeeScript 1.3.3
(function() {
  var Account, Keepr, Util, log,
    __slice = [].slice;

  Keepr = (function() {

    function Keepr(jsonDrop, root) {
      var onErr, onLoad,
        _this = this;
      this.jsonDrop = jsonDrop;
      this.$root = $(root);
      this.$accountList = $('#account-list');
      this.$modalPlaceholder = $('#modal-holder');
      this.$accountTemplate = $('#account-template').text();
      this.$generatePasswordTemplate = $('#generate-password-template').text();
      this.$deleteAccountTemplate = $('#delete-account-template').text();
      $('#logout').click(function(event) {
        return _this.logout();
      });
      onErr = function(err) {
        $('#error-notice').removeClass('hidden');
        return console.log(err);
      };
      onLoad = _.after(2, function() {
        _this.wire();
        _this.render();
        return _this.$root.removeClass('hidden');
      });
      this.jsonDrop.get('passwordGenerator').get(function(err, val) {
        if (err) {
          return onErr(err);
        }
        _this.passwordGenerator = Function("passwordKey, privateKey, sha1, sha1base64, urlEncode", val);
        return onLoad();
      });
      this.jsonDrop.get('accounts').map(function(val, node) {
        var account;
        account = new Account(val);
        account.node = node;
        return account;
      }, function(err, accounts) {
        if (err) {
          return onErr(err);
        }
        _this.accounts = accounts;
        return onLoad();
      });
    }

    Keepr.prototype.wire = function() {
      var _this = this;
      $('#new-account-form').submit(function(event) {
        return _this.onCreateAccount(event);
      });
      return $('#cancel-new-account-button').click(function(event) {
        event.preventDefault();
        return _this.clearNewAccountForm();
      });
    };

    Keepr.prototype.render = function() {
      var account, _i, _len, _ref, _results;
      this.$accountList.empty();
      _ref = _.sortBy(this.accounts, function(account) {
        return account.url;
      });
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        account = _ref[_i];
        _results.push(this.renderAccount(account));
      }
      return _results;
    };

    Keepr.prototype.renderAccount = function(account) {
      var $account, hostname, id, path, protocol, _ref,
        _this = this;
      $account = $(this.$accountTemplate);
      id = _.uniqueId('account_');
      $('.accordion-toggle', $account).attr('href', '#' + id);
      $('.accordion-body', $account).attr('id', id);
      _ref = Util.splitUrl(account.url), protocol = _ref[0], hostname = _ref[1], path = _ref[2];
      $('.url-protocol', $account).text(protocol + '://');
      $('.url-hostname', $account).text(hostname);
      if (path) {
        $('.url-path', $account).text('/' + path);
      }
      $('.url', $account).attr('href', account.url);
      $('.url', $account).attr('target', '_new');
      $('.password-button', $account).click(function(event) {
        return _this.onGeneratePassword(event, account);
      });
      $('.edit-button', $account).click(function(event) {
        return _this.onEditAccount(event, account);
      });
      return this.$accountList.append($account);
    };

    Keepr.prototype.onEditAccount = function(event, account) {
      var $modal,
        _this = this;
      this.$modalPlaceholder.empty().append($('#edit-account-template').text());
      $modal = $('.modal', this.$modalPlaceholder);
      $('.url', $modal).text(account.url);
      $('.username', $modal).text(account.username);
      $('.password-key', $modal).text(account.passwordKey);
      $('.update-hash-button', $modal).click(function(event) {
        $modal.modal('hide');
        return _this.onUpdateHash(account);
      });
      $('.account-delete-button', $modal).click(function(event) {
        $modal.modal('hide');
        return _this.onDeleteAccount(event, account);
      });
      $modal.modal('show');
      return $modal.on('hidden', function() {
        return log('Done editing');
      });
    };

    Keepr.prototype.onUpdateHash = function(account) {
      var _this = this;
      return this.promptRepeatedPrivateKey(function(err, privateKey) {
        var passwordHash;
        if (err) {
          return alert(err);
        }
        passwordHash = Keepr.hashPassword(_this.generatePassword(privateKey, account.passwordKey));
        return account.updatePasswordHash(passwordHash, function(err) {
          if (err) {
            return alert("Could not update password hash");
          }
        });
      });
    };

    Keepr.prototype.onDeleteAccount = function(event, account) {
      var $modal,
        _this = this;
      this.$modalPlaceholder.empty().append(this.$deleteAccountTemplate);
      $modal = $('.modal', this.$modalPlaceholder);
      $modal.modal('show');
      $('.confirm', $modal).click(function(event) {
        _this.accounts = _.reject(_this.accounts, function(a) {
          return a.url === account.url;
        });
        $modal.modal('hide');
        return account.node.remove(function(err) {
          return _this.render();
        });
      });
      $('.cancel', $modal).click(function(event) {
        return $modal.modal('hide');
      });
      return $modal.on('hidden', function() {
        return log('Cancelled the deletion of account');
      });
    };

    Keepr.hashPassword = function(password, key) {
      return CryptoJS.SHA1(password + key).toString().substring(0, 4);
    };

    Keepr.prototype.onCreateAccount = function(event) {
      var key, url, username,
        _this = this;
      event.preventDefault();
      url = $('#new-url').val();
      username = $('#new-username').val();
      key = $('#new-password-key').val();
      return this.promptRepeatedPrivateKey(function(err, privateKey) {
        var account, passwordHash;
        if (err) {
          return alert(err);
        }
        passwordHash = Keepr.hashPassword(_this.generatePassword(privateKey, key));
        try {
          account = new Account({
            url: url,
            username: username,
            passwordKey: key,
            passwordHash: passwordHash
          });
        } catch (error) {
          return alert("The url '" + url + "' is invalid");
        }
        _this.accounts.push(account);
        return _this.jsonDrop.get('accounts').push(account.val(), function(err, node) {
          if (err) {
            return alert(err);
          }
          account.node = node;
          _this.render();
          return _this.clearNewAccountForm();
        });
      });
    };

    Keepr.prototype.clearNewAccountForm = function() {
      return $('#new-account-form input').each(function() {
        return $(this).val('');
      });
    };

    Keepr.prototype.onGeneratePassword = function(event, account) {
      var _this = this;
      return this.promptPrivateKey(function(err, privateKey) {
        var hash;
        if (err) {
          return alert(err);
        }
        hash = Keepr.hashPassword(_this.generatePassword(privateKey, account.passwordKey));
        if (hash !== account.passwordHash) {
          return alert('invalid');
        }
        return _this.showPassword(account, _this.generatePassword(account.passwordKey, privateKey));
      });
    };

    Keepr.prototype.promptPrivateKey = function(callback) {
      var $modal, $modalPlaceholder,
        _this = this;
      $modalPlaceholder = $('#modal-holder');
      $modalPlaceholder.empty().append($($('#generate-single-password-template').text()));
      $modal = $('.modal', $modalPlaceholder);
      $modal.modal('show');
      return $('#generate-password-form').submit(function(event) {
        var privateKey;
        event.preventDefault();
        privateKey = $('#private-key').val();
        $modal.modal('hide');
        $modalPlaceholder.empty();
        return callback(null, privateKey);
      });
    };

    Keepr.prototype.promptRepeatedPrivateKey = function(callback) {
      var $modal, $modalPlaceholder,
        _this = this;
      $modalPlaceholder = $('#modal-holder');
      $modalPlaceholder.empty().append($(this.$generatePasswordTemplate));
      $modal = $('.modal', $modalPlaceholder);
      $modal.modal('show');
      return $('#generate-password-form').submit(function(event) {
        var privateKey, privateKeyRepeat;
        event.preventDefault();
        privateKey = $('#private-key').val();
        privateKeyRepeat = $('#private-key-repeat').val();
        $modal.modal('hide');
        $modalPlaceholder.empty();
        if (privateKey !== privateKeyRepeat) {
          return callback('passwords do not match');
        }
        return callback(null, privateKey);
      });
    };

    Keepr.prototype.showPassword = function(account, password) {
      var $modal, $modalPlaceholder, $tmpl,
        _this = this;
      $tmpl = $('#show-password-template').text();
      $modalPlaceholder = $('#modal-holder');
      $modalPlaceholder.empty().append($tmpl);
      $modal = $('.modal', $modalPlaceholder);
      $modal.modal('show');
      $('.show-password', $modal).val(password).select();
      password = null;
      setTimeout((function() {
        return $modal.modal('hide');
      }), 15000);
      return $modal.on('hidden', function() {
        return $modalPlaceholder.empty();
      });
    };

    Keepr.prototype.generatePassword = function(passwordKey, privateKey) {
      var sha1, sha1base64, urlEncode;
      sha1 = function(str) {
        return CryptoJS.SHA1(str).toString();
      };
      sha1base64 = function(str) {
        return CryptoJS.SHA1(str).toString(CryptoJS.enc.Base64);
      };
      urlEncode = function(str) {
        return str.replace('+', '-').replace('/', '_');
      };
      return this.passwordGenerator(passwordKey, privateKey, sha1, sha1base64, urlEncode);
    };

    Keepr.prototype.logout = function() {
      var _this = this;
      return this.jsonDrop.fsys.dropbox.signOut(function(error) {
        return window.location.href = "login.html";
      });
    };

    return Keepr;

  })();

  Account = (function() {

    function Account(_arg) {
      this.url = _arg.url, this.username = _arg.username, this.passwordKey = _arg.passwordKey, this.passwordHash = _arg.passwordHash;
      try {
        Util.splitUrl(this.url);
      } catch (error) {
        throw error;
      }
      this.node = null;
    }

    Account.prototype.val = function() {
      return {
        url: this.url,
        username: this.username,
        passwordKey: this.passwordKey,
        passwordHash: this.passwordHash
      };
    };

    Account.prototype.updatePasswordHash = function(passwordHash, callback) {
      var currentPasswordHash,
        _this = this;
      currentPasswordHash = this.passwordHash;
      this.passwordHash = passwordHash;
      return this.node.set(this.val(), function(err) {
        if (err) {
          _this.passwordHash = currentPasswordHash;
          return callback(err);
        } else {
          return callback();
        }
      });
    };

    return Account;

  })();

  Util = (function() {

    function Util() {}

    Util.splitUrl = function(url) {
      var hostname, path, protocol, remainder, _ref, _ref1;
      _ref = url.split('://'), protocol = _ref[0], remainder = _ref[1];
      if (!remainder) {
        throw new Error('Invalid url');
      }
      _ref1 = remainder.split('/'), hostname = _ref1[0], path = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      return [protocol, hostname, path.join('/')];
    };

    Util.urlParam = function(name) {
      var results;
      results = new RegExp("[\\?&]" + name).exec(window.location.href);
      return (results != null ? results[0] : void 0) || 0;
    };

    return Util;

  })();

  log = Util.urlParam('__keepr-debug__') ? (console.log('Keepr debug mode'), function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  }) : function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  $(function() {
    var dropbox, jsonDrop;
    dropbox = new Dropbox.Client({
      key: 'r2mjxyg3kgewwfd',
      sandbox: true
    });
    return jsonDrop = dropbox.authenticate(function(err, data) {
      if (err) {
        throw new Error(err);
      }
      return new Keepr(JsonDrop.forDropbox(dropbox), '#app-ui');
    });
  });

}).call(this);
