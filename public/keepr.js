// Generated by CoffeeScript 1.3.3
(function() {
  var Account, Keepr, Util, log,
    __slice = [].slice;

  Keepr = (function() {

    function Keepr(jsonDrop, root) {
      var onLoad,
        _this = this;
      this.jsonDrop = jsonDrop;
      this.$root = $(root);
      this.$accountList = $('#account-list');
      this.$modalPlaceholder = $('#modal-holder');
      this.$accountTemplate = $('#account-template').text();
      this.$generatePasswordTemplate = $('#generate-password-template').text();
      this.$deleteAccountTemplate = $('#delete-account-template').text();
      onLoad = _.after(2, function(err) {
        if (err) {
          $('#error-notice').removeClass('hidden');
          return alert(err);
        }
        _this.wire();
        _this.render();
        return _this.$root.removeClass('hidden');
      });
      this.jsonDrop.get('passwordGenerator').getVal(function(err, val) {
        if (err) {
          return onLoad(err);
        }
        _this.passwordGenerator = Function("passwordKey, privateKey, sha1, sha1base64, urlEncode", val);
        return onLoad();
      });
      this.jsonDrop.get('accounts').map(function(val, node) {
        var account;
        account = new Account(val);
        console.log(node);
        account.node = node;
        return account;
      }, function(err, accounts) {
        if (err) {
          return onLoad(err);
        }
        _this.accounts = accounts;
        return onLoad();
      });
    }

    Keepr.prototype.wire = function() {
      var _this = this;
      $('#new-account-form').submit(function(event) {
        return _this.onCreateAccount(event);
      });
      return $('#cancel-new-account-button').click(function(event) {
        event.preventDefault();
        return _this.clearNewAccountForm();
      });
    };

    Keepr.prototype.render = function() {
      var account, _i, _len, _ref, _results;
      this.$accountList.empty();
      _ref = _.sortBy(this.accounts, function(account) {
        return account.url;
      });
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        account = _ref[_i];
        _results.push(this.renderAccount(account));
      }
      return _results;
    };

    Keepr.prototype.renderAccount = function(account) {
      var $account, hostname, id, path, protocol, _ref,
        _this = this;
      $account = $(this.$accountTemplate);
      id = _.uniqueId('account_');
      $('.accordion-toggle', $account).attr('href', '#' + id);
      $('.accordion-body', $account).attr('id', id);
      _ref = Util.splitUrl(account.url), protocol = _ref[0], hostname = _ref[1], path = _ref[2];
      $('.url-protocol', $account).text(protocol + '://');
      $('.url-hostname', $account).text(hostname);
      if (path) {
        $('.url-path', $account).text('/' + path);
      }
      $('.url', $account).attr('href', account.url);
      $('.url', $account).attr('target', '_new');
      $('.username', $account).text(account.username);
      $('.password-key', $account).text(account.passwordKey);
      $('.password-button', $account).click(function(event) {
        return _this.onGeneratePassword(event, account);
      });
      $('.account-delete-button', $account).click(function(event) {
        return _this.onDeleteAccount(event, account);
      });
      return this.$accountList.append($account);
    };

    Keepr.prototype.onDeleteAccount = function(event, account) {
      var $modal,
        _this = this;
      this.$modalPlaceholder.empty().append(this.$deleteAccountTemplate);
      $modal = $('.modal', this.$modalPlaceholder);
      $modal.modal('show');
      $('.confirm', $modal).click(function(event) {
        _this.accounts = _.reject(_this.accounts, function(a) {
          return a.url === account.url;
        });
        $modal.modal('hide');
        return account.node.remove(function(err) {
          return _this.render();
        });
      });
      $('.cancel', $modal).click(function(event) {
        return $modal.modal('hide');
      });
      return $modal.on('hidden', function() {
        return log('Cancelled the deletion of account');
      });
    };

    Keepr.prototype.onCreateAccount = function(event) {
      var account, key, url, username,
        _this = this;
      event.preventDefault();
      url = $('#new-url').val();
      username = $('#new-username').val();
      key = $('#new-password-key').val();
      $('#new-key-button').attr('disabled', 'disabled');
      try {
        account = new Account({
          url: url,
          username: username,
          passwordKey: key
        });
      } catch (error) {
        alert("The url '" + url + "' is invalid");
        return;
      }
      this.accounts.push(account);
      return this.jsonDrop.get('accounts').pushVal(account, function(err, node) {
        if (err) {
          return alert(err);
        }
        account.node = node;
        _this.render();
        $('#new-key-button').removeAttr('disabled');
        return _this.clearNewAccountForm();
      });
    };

    Keepr.prototype.clearNewAccountForm = function() {
      return $('#new-account-form input').each(function() {
        return $(this).val('');
      });
    };

    Keepr.prototype.onGeneratePassword = function(event, account) {
      var $modal, $modalPlaceholder,
        _this = this;
      $modalPlaceholder = $('#modal-holder');
      $modalPlaceholder.empty().append($(this.$generatePasswordTemplate));
      $modal = $('.modal', $modalPlaceholder);
      $modal.modal('show');
      return $('#generate-password-form').submit(function(event) {
        var privateKey, privateKeyRepeat;
        event.preventDefault();
        privateKey = $('#private-key').val();
        privateKeyRepeat = $('#private-key-repeat').val();
        $modal.modal('hide');
        $modalPlaceholder.empty();
        if (privateKey !== privateKeyRepeat) {
          return alert('passwords do not match');
        }
        return _this.showPassword(account, privateKey);
      });
    };

    Keepr.prototype.showPassword = function(account, privateKey) {
      var $modal, $modalPlaceholder, $tmpl, password,
        _this = this;
      password = this.generatePassword(account.passwordKey, privateKey);
      $tmpl = $('#show-password-template').text();
      $modalPlaceholder = $('#modal-holder');
      $modalPlaceholder.empty().append($tmpl);
      $modal = $('.modal', $modalPlaceholder);
      $modal.modal('show');
      $('.show-password', $modal).val(password).select();
      password = null;
      setTimeout((function() {
        return $modal.modal('hide');
      }), 15000);
      return $modal.on('hidden', function() {
        return $modalPlaceholder.empty();
      });
    };

    Keepr.prototype.generatePassword = function(passwordKey, privateKey) {
      var sha1, sha1base64, urlEncode;
      sha1 = function(str) {
        return CryptoJS.SHA1(str).toString();
      };
      sha1base64 = function(str) {
        return CryptoJS.SHA1(str).toString(CryptoJS.enc.Base64);
      };
      urlEncode = function(str) {
        return str.replace('+', '-').replace('/', '_');
      };
      return this.passwordGenerator(passwordKey, privateKey, sha1, sha1base64, urlEncode);
    };

    return Keepr;

  })();

  Account = (function() {

    function Account(_arg) {
      this.url = _arg.url, this.username = _arg.username, this.passwordKey = _arg.passwordKey;
      try {
        Util.splitUrl(this.url);
      } catch (error) {
        throw error;
      }
      this.node = null;
    }

    return Account;

  })();

  Util = (function() {

    function Util() {}

    Util.splitUrl = function(url) {
      var hostname, path, protocol, remainder, _ref, _ref1;
      _ref = url.split('://'), protocol = _ref[0], remainder = _ref[1];
      if (!remainder) {
        throw new Error('Invalid url');
      }
      _ref1 = remainder.split('/'), hostname = _ref1[0], path = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      return [protocol, hostname, path.join('/')];
    };

    Util.urlParam = function(name) {
      var results;
      results = new RegExp("[\\?&]" + name).exec(window.location.href);
      return (results != null ? results[0] : void 0) || 0;
    };

    return Util;

  })();

  log = Util.urlParam('__keepr-debug__') ? (console.log('Keepr debug mode'), function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  }) : function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  $(function() {
    var jsonDrop, key;
    key = 'ItqJc7dXdkA=|zw4NUV7gAyoyYYzAl/35HXOKgUN/4nv3Tr8MbeVi6Q==';
    jsonDrop = new JsonDrop({
      key: key
    });
    return new Keepr(jsonDrop, '#app-ui');
  });

}).call(this);
